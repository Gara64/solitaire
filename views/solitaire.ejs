<html>
<head>
	<meta charset="utf-8" />
	
	<style>
		.div_column{
			border: 1px solid;
			width:80;
			height:1000px; 
			float: left;
			display: inline-block;
			overflow: auto;
			position: relative;
			margin-top: 50px;
			margin-left: 4px;
			margin-right: 4px;
			/*text-align: center;*/
			padding-top: 75px;
			padding-left: 5px;
			column-count: 3;
			/*-webkit-column-count: 3; /* Chrome, Safari, Opera */
			-moz-column-count: 3; /* Firefox */
			-webkit-column-gap: 40px; /* Chrome, Safari, Opera */
			-moz-column-gap: 40px; /* Firefox */
			column-gap: 40px;*/
		}
		
		.div_inside_column{
			width : 80px;
			height: 96px;
			margin-top: -75px;
			position: relative;
			
		}
		
		.div_inside_foundation{
			width : 72px;
			height: 96px;
			margin-top: 0px;
			position: absolute;
		}
		
		.div_inside_waste{
			width : 80px;
			height: 96px;
			margin-top: 0px;
			position: relative;
		}
		
		
		#div_deck{
			display: inline-block;
			width: 72px;
			height: 96px;
			border: 1px solid;
		}
		.div_waste{
			display: inline-block;
			width: 72px;
			height: 96px;
			border: 1px solid;
			margin-right:200px;
		}
		
		.div_foundation{
			display: inline-block;
			width: 72px;
			height: 96px;
			align: right;
			border: 1px solid;
		}
		
	</style>
</head>
<body>
<h1>Solitaire</h1>

<div id='div_deck'>
	<img src="<%=imgBack%>" id='deck'>
</div>
<div class='div_waste'>
</div>

<%
    for(var i = 0 ; i < 4 ; i++) 
	{
%>		<div class='div_foundation' id='<%=i%>' ondragover="allowDrop(event)" ondrop="drop(event)"></div>
<%  }

%><div></div>


<!--<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>-->


<script>
//See JQueryUI to use draggable cards : http://stackoverflow.com/questions/561844/how-to-move-div-with-the-mouse-using-jquery


	var cardsImg = <%- JSON.stringify(imgPath) %>;
	var cardImgBack = '<%= imgBack %>';
	var sortedCards = []; //contains all the cards
	
	var plateauCards = [];
	var deckCards = [];
	var curDeckI = 0;
	var foundationsCards = createTwoDimArray(4, 13);
	
	var foundationsLastCards = [];
	var columnsLastCards = [];
	
	/* Creates card objects */
	for(var i=0;i<52;i++)
		sortedCards[i] = createCardByImgName(i, cardsImg[i]);
	var tmpCards = sortedCards.slice(0); //used to create plateau and deck; empty at the end of the init
	
	
	/* Creates plateau */
	for(var i = 0; i < 7; i++)
	{
		var divColumn = document.createElement('div');
		divColumn.className = 'div_column ' + i;
		divColumn.ondragover = allowDrop;
		divColumn.ondrop = drop;
		
		//create recursively the divs with the img
		createDivsInside((i+1), divColumn);
		
		document.body.appendChild(divColumn);
	}
	
	/* Creates the deck array */
	for(var i = 0; i < 52 - plateauCards.length; i++)
	{
		var genRandomInt = Math.floor(Math.random() * (tmpCards.length-1));
		deckCards[i] = tmpCards[ genRandomInt ];
		tmpCards.splice(genRandomInt, 1);
	}
	
	/* Handles the click on the deck */
	document.getElementById('div_deck').addEventListener('click', function(ev) 
	{
		if( deckCards.length == 0 )
		{
			var divDeck = document.getElementById('div_deck');
			divDeck.removeChild(divDeck.firstChild);
		}
		
		//when we reach the deck'end, we start from 0
		if( curDeckI >= deckCards.length )
			curDeckI = 0;
		console.log('length deck : ' + deckCards.length);
		var randomCard = deckCards[ curDeckI++ ];
		var waste = document.getElementsByClassName('div_waste')[0];
		var imgCard = document.createElement('img');
		imgCard.id = 'card'+randomCard.id;
		imgCard.src = randomCard.img;
		
		var divInside = document.createElement('div');
		divInside.className = 'div_inside_waste ' + randomCard.id;
		divInside.ondragstart = drag;
		divInside.draggable = true;
		divInside.appendChild(imgCard);
		
		if( waste.firstChild )
			waste.removeChild(waste.firstChild);
		waste.appendChild(divInside);
	}, false);
	
	/* Card constructor */
	function Card(id, type, number, img)
	{
		this.id = id;
		this.type = type;
		this.number = number;
		this.img = img;
		
		this.color = function(){
			if(type == 'spade' || type == 'club')
				return 'black';
			else if(type == 'diamond' || type == 'heart')
				return 'red';
		};
	}
	
	
	
	
	function allowDrop(ev) {
		ev.preventDefault();
	}
	
	function drop(ev) 
	{
		ev.preventDefault(); // allows the drop
		var data = ev.dataTransfer.getData("text/html"); //this returns the img id (card0, card1..)
		
		var div_img = document.getElementsByClassName(data)[0];
		var firstParentOrigin = getFirstParent(div_img);
		var card = findCardObjectById(div_img.firstChild.id);
		
		var cardDropped = false;
		
		//card dropped on plateau's card
		if((ev.target.parentNode.className.indexOf('div_inside_column') > -1)) 
		{
			if(ev.target.parentNode.parentNode !== undefined && ev.target.parentNode.parentNode.className != div_img.parentNode.className
				&& !containsHiddenCard(ev.target.parentNode))
			{
				/* CHECK CARD VALUE, COMMENT FOR TEST ONLY */
				if( checkIfDropAllowed(div_img.firstChild.id, ev.target.id, false) )
				{
					div_img.className = 'div_inside_column ' + card.id;
					ev.target.parentNode.appendChild(div_img);
					cardDropped = true;
				}
				/* REMOVE THIS WHEN TEST OK */
				/*div_img.className = 'div_inside_column ' + card.id;
				ev.target.parentNode.appendChild(div_img);
				cardDropped = true;*/
			}
		}
		
		//card dropped on an empty column
		else if(ev.target.className.indexOf('div_column') > -1 && ev.target.childNode === undefined){
			//if(ev.target.className != div_img.parentNode.className)

				/* CHECK CARD VALUE, COMMENT FOR TEST ONLY */
				if( checkIfDropAllowed(div_img.firstChild.id, undefined, false) )
				{
					div_img.className = 'div_inside_column ' + card.id;
					ev.target.appendChild(div_img);
					cardDropped = true;
				}
				/* REMOVE THIS WHEN TEST OK */
				/*div_img.className = 'div_inside_column ' + card.id;
				ev.target.appendChild(div_img);
				cardDropped = true;
				*/
				
		}
	
		//card dropped on a foundation
		else if(ev.target.className == 'div_foundation' || ev.target.parentNode.className.indexOf('div_inside_foundation' ) > -1) {

			//one cannot drop more than 1 card on a foundation
			if( div_img.childNodes.length > 1 )
				return;
			
			console.log('child : ' + ev.target.childNodes[0]);
			//if there is already a card, and the target is the div
			if( ev.target.parentNode.className.indexOf('div_inside_foundation' ) > - 1 ){
				console.log('hey');
				if( checkIfDropAllowed(div_img.firstChild.id, ev.target.id, true) ){
					div_img.className = 'div_inside_foundation ' + card.id;
					var div_foundation = getFirstParent(ev.target);
					div_foundation.appendChild(div_img);
					cardDropped = true;
				}
				console.log('nop');
			}
			
			//if the target is an empty foundation
			else{
				console.log('you');
				if( checkIfDropAllowed(div_img.firstChild.id, undefined, true) ){
					div_img.className = 'div_inside_foundation ' + card.id;
					var div_foundation = getFirstParent(ev.target);
					div_foundation.appendChild(div_img);
					cardDropped = true;
				}
			}
			//foundationsCards[id].push(card); //TODO : change this, doesn't work when id > 0
			
		}
		
		if( cardDropped ){
			showLastColumnCard(firstParentOrigin);
			if( firstParentOrigin.className == 'div_waste' )
				deckCards.splice(curDeckI-1, 1);
		}
	}

	function drag(ev) {
		//get the parent's clicked element (the div), transfer its className and put it as image,
		//to show the children cards during the drag
		
		var parent = document.getElementById(ev.target.id).parentNode;
		if(!containsHiddenCard(parent))
		{
			ev.dataTransfer.setData("text/html", parent.className);
			ev.dataTransfer.setDragImage(parent, 72/2, 0);
		}
		else
			return false;
	}
	
	/* Create the img DOM element */
	function createElementImg(id, src)
	{
		var img = document.createElement('img');
		img.id = id;
		img.src = src;
		img.width = 72;
		img.height = 96;
		
		return img;
	}
	
	/* Creates recursively the hierarchy of the divs containing the images */
	function createDivsInside(nDiv, divParent)
	{
		if(nDiv == 0)
			return;
		else
		{
			var genRandomInt = Math.floor(Math.random() * (tmpCards.length-1));
			var randomCard = tmpCards[ genRandomInt ];
			
			var divInside = document.createElement('div');
			divInside.className = 'div_inside_column ' + randomCard.id;
			divInside.ondragstart = drag;
			divInside.draggable = true;
			if( nDiv == 1 )
				var img = createElementImg('card'+randomCard.id, randomCard.img);
			else
				var img = createElementImg('card'+randomCard.id, cardImgBack);
				
			divInside.appendChild(img);
			divParent.appendChild(divInside);
			
			plateauCards.push(randomCard);
			tmpCards.splice(genRandomInt, 1);
			
			return createDivsInside(nDiv-1, divInside);
		}
	}
	
	/* parse the image name to create the Card object */
	function createCardByImgName(id, img)
	{
		var c;
		console.log(img);
		if(img !== undefined )
		{
			var split_type = img.split('_');
			if(split_type.length == 2)
			{
				var split_number = split_type[1].split('.');
				if(split_number.length == 2)
					var c = new Card(id, split_type[0], parseInt(split_number[0], 10), img);
			}
		}
		return c;
	}
	
	/* get the number of div childs for a parent node */
	function getNDivChilds(element)
	{
		return element.getElementsByTagName('div').length;
	}
	
	/* get recursively the div column by a child node */
	/*function getColumnByDivChild(div)
	{
		if(!(div.parentNode.className.indexOf('div_column') > -1))
			return getColumnByDivChild(div.parentNode);
		//else if(!(div.parentNode.className.indexOf('div_foundation') > -1))
		//	return getColumnByDivChild(div.parentNode);
		else
			return div.parentNode;
	}*/
	
	/* get recursively the first parent containing a className in the hierarchy for a child node */
	function getFirstParent(el)
	{
		if( el.parentNode.className != '' )
			return getFirstParent(el.parentNode);
		else
			return el;
	}
	
	/* show the last card of a column if necessary */
	function showLastColumnCard(column)
	{
		var nChilds = getNDivChilds(column);
		if( nChilds != 0 )
		{
			var lastDiv = column.getElementsByTagName('div')[nChilds - 1];
			var lastCard = lastDiv.firstChild;
			
			//the src attribute returns the full URI, we only need the img name
			var imgName = extractCardName(lastCard.src);
			
			//the last card is hidden, it needs to be shown
			if( imgName == cardImgBack )
			{
				var lastCardObject = findCardObjectById(lastCard.id);
				lastCard.src = lastCardObject.img;
			}
		}
	}
	
	/* find a Card object by its DOM id */
	function findCardObjectById(domId)
	{
		//remove the 'card' in the id and keep the number
		var id = domId.substring(4);
		for(var i = 0; i < sortedCards.length; i++)
		{
			if(sortedCards[i].id == id)
				return sortedCards[i];
		}
	}
	
	function extractCardName(src)
	{
		var tokensSrc = src.split('/');
		return tokensSrc[ tokensSrc.length - 1 ];
	}
	
	/* returns true if a hidden card is a child of the parent node */
	function isHiddenCardPresent(parent)
	{
		var imgs = getElementsByTagName('img');
		
		for(var i = 0; i < imgs.length; i++)
		{
			if( extractCardName(imgs[i].src) == cardImgBack )
				return true;
		}
		return false;
	}
	
	/* returns true if a div contains a hidden card */
	function containsHiddenCard(div)
	{
		var img = div.firstChild;
		if(img !== undefined)
		{
			if( extractCardName(img.src) == cardImgBack )
				return true;
		}
		return false;
	}
	
	/* checks if the drop is allowed according to the source and target cards */
	function checkIfDropAllowed(sourceImgId, targetImgId, isFoundation)
	{
		var sourceCard = findCardObjectById(sourceImgId);
		//the target is a card
		if( targetImgId )
		{
			if( isFoundation === true )
			{
				var targetCard = findCardObjectById(targetImgId);
				return sourceCard.number == targetCard.number + 1 && sourceCard.type == targetCard.type; 
			}
			else
			{
				var targetCard = findCardObjectById(targetImgId);
				return sourceCard.number == targetCard.number - 1 && sourceCard.color() != targetCard.color();
			}
		}
		//the target is an empty column, checks if the source is a king
		else
		{
			if( isFoundation === true )
				return sourceCard.number == 1;
			else
				return sourceCard.number == 13;
		}
	}
	
	function createTwoDimArray(dim1, dim2)
	{
		var ar = new Array(dim1);
		for (var i = 0; i < dim1; i++) 
			ar[i] = new Array(dim2);
		return ar;
	}
	
	//TODO : handle the cards array (foundation and column), and the double click on a card
	/* Called when double click on a card */
	function cardAutoPlacement(cardId)
	{
		/* First, check the foundations */
		for( var i=0; i<foundationsLastCards.length; i++ )
		{
			if( checkIfDropAllowed(cardId, foundationsLastCards[i], true) )
			{
				//TODO : place card
			}
		}
		
		/* Then, check the columns */
		for( var i=0; i<columnsLastCards.length; i++)
		{
			if( checkIfDropAllowed(cardId, columnsLastCards[i], false) )
			{
				//TODO : place card
			}
		}
		
	}
	
	
</script>

</body>
</html>